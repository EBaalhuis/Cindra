@page "/"
@using System.ComponentModel;

<style>
    th, td {
        padding: 5px;
    }
</style>

<PageTitle>Cindra</PageTitle>

<EditForm Model="model">
    <table>
        <tr>
            <td>1st card</td>
            <td>
                <InputSelect class="form-select"
                             TValue="string"
                             Value="model.Card1"
                             ValueChanged="HandleCard1"
                             ValueExpression="@(() => model.Card1)">
                    <option>@string.Empty</option>
                    @foreach (var card in CardOptions)
                    {
                        <option>@card</option>
                    }
                </InputSelect>
            </td>
            <td>
                <InputCheckbox 
                               TValue="string"
                               Value="model.Card1Draconic"
                               ValueChanged="HandleCard1Draconic"
                               ValueExpression="@(() => model.Card1Draconic)" />
            </td>
            <td>Draconic</td>
        </tr>
        <tr>
            <td>2nd card</td>
            <td>
                <InputSelect class="form-select"
                             TValue="string"
                             Value="model.Card2"
                             ValueChanged="HandleCard2"
                             ValueExpression="@(() => model.Card2)">
                    <option>@string.Empty</option>
                    @foreach (var card in CardOptions)
                    {
                        <option>@card</option>
                    }
                </InputSelect>
            </td>
            <td>
                <InputCheckbox 
                               TValue="string"
                               Value="model.Card2Draconic"
                               ValueChanged="HandleCard2Draconic"
                               ValueExpression="@(() => model.Card2Draconic)" />
            </td>
            <td>Draconic</td>
        </tr>
        <tr>
            <td>3rd card</td>
            <td>
                <InputSelect class="form-select"
                             TValue="string"
                             Value="model.Card3"
                             ValueChanged="HandleCard3"
                             ValueExpression="@(() => model.Card3)">
                    <option>@string.Empty</option>
                    @foreach (var card in CardOptions)
                    {
                        <option>@card</option>
                    }
                </InputSelect>
            </td>
            <td>
                <InputCheckbox 
                               TValue="string"
                               Value="model.Card3Draconic"
                               ValueChanged="HandleCard3Draconic"
                               ValueExpression="@(() => model.Card3Draconic)" />
            </td>
            <td>Draconic</td>
        </tr>
        <tr>
            <td>4th card</td>
            <td>
                <InputSelect class="form-select"
                             TValue="string"
                             Value="model.Card4"
                             ValueChanged="HandleCard4"
                             ValueExpression="@(() => model.Card4)">
                    <option>@string.Empty</option>
                    @foreach (var card in CardOptions)
                    {
                        <option>@card</option>
                    }
                </InputSelect>
            </td>
            <td>
                <InputCheckbox 
                               TValue="string"
                               Value="model.Card4Draconic"
                               ValueChanged="HandleCard4Draconic"
                               ValueExpression="@(() => model.Card4Draconic)" />
            </td>
            <td>Draconic</td>
        </tr>
    </table>
</EditForm>

<div>
    @for (int i = 0; i < 3; i++)
    {
        <p>
            Best turn starting with @i daggers: <b>@model.Result?.MaxStartingWithNDaggers[i]</b>
            <br />
            @model.Result?.BestTurnStartingWithNDaggers[i]
            <br />
            @model.GetEndDaggersText(i)
        </p>
    }
</div>

@code {
    Model model = new Model();

    private void UpdateResult()
    {
        model.Result = Calculator.GetResult(model.GetCards());
    }

    private void HandleCard1(string? c)
    {
        model.Card1 = c;
        UpdateResult();
    }

    private void HandleCard2(string? c)
    {
        model.Card2 = c;
        UpdateResult();
    }

    private void HandleCard3(string? c)
    {
        model.Card3 = c;
        UpdateResult();
    }

    private void HandleCard4(string? c)
    {
        model.Card4 = c;
        UpdateResult();
    }

    private void HandleCard1Draconic(bool d)
    {
        model.Card1Draconic = d;
        UpdateResult();
    }

    private void HandleCard2Draconic(bool d)
    {
        model.Card2Draconic = d;
        UpdateResult();
    }

    private void HandleCard3Draconic(bool d)
    {
        model.Card3Draconic = d;
        UpdateResult();
    }

    private void HandleCard4Draconic(bool d)
    {
        model.Card4Draconic = d;
        UpdateResult();
    }

    public class Model
    {
        public string? Card1 { get; set; }
        public string? Card2 { get; set; }
        public string? Card3 { get; set; }
        public string? Card4 { get; set; }

        public bool Card1Draconic { get; set; } = true;
        public bool Card2Draconic { get; set; } = true;
        public bool Card3Draconic { get; set; } = true;
        public bool Card4Draconic { get; set; } = true;

        public Result? Result { get; set; }

        public string GetEndDaggersText(int i)
        {
            if (Result?.DaggersAtEnd[i] == null) return string.Empty;
            return $"End with {Result?.DaggersAtEnd[i]} daggers";
        }

        public IEnumerable<Card> GetCards()
        {
            if (Card1 != null && Card1 != string.Empty)
            {
                yield return new Card(Card1, Card1Draconic);
            }
            if (Card2 != null && Card2 != string.Empty)
            {
                yield return new Card(Card2, Card2Draconic);
            }
            if (Card3 != null && Card3 != string.Empty)
            {
                yield return new Card(Card3, Card3Draconic);
            }
            if (Card4 != null && Card4 != string.Empty)
            {
                yield return new Card(Card4, Card4Draconic);
            }
        }
    }

    string[] CardOptions = new[]
    {
        new Card(3, 0, 1, goAgain: true).ToString(),
        new Card(2, 0, 2, goAgain: true).ToString(),
        new Card(1, 0, 3, goAgain: true).ToString(),
        new Card(4, 1, 1, goAgain: true).ToString(),
        new Card(3, 1, 2, goAgain: true).ToString(),
        new Card(2, 1, 3, goAgain: true).ToString(),
        new Card(5, 2, 1, goAgain: true).ToString(),
        new Card(4, 2, 2, goAgain: true).ToString(),
        new Card(3, 2, 3, goAgain: true).ToString(),
        new Card(4, 0, 1, goAgain: false).ToString(),
        new Card(3, 0, 2, goAgain: false).ToString(),
        new Card(2, 0, 3, goAgain: false).ToString(),
        new Card(5, 1, 1, goAgain: false).ToString(),
        new Card(4, 1, 2, goAgain: false).ToString(),
        new Card(3, 1, 3, goAgain: false).ToString(),
        new Card(6, 2, 1, goAgain: false).ToString(),
        new Card(5, 2, 2, goAgain: false).ToString(),
        new Card(4, 2, 3, goAgain: false).ToString(),
    };
}
